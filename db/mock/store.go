// Code generated by MockGen. DO NOT EDIT.
// Source: p2platform/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "p2platform/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CloseBuyRequestBySellRequest mocks base method.
func (m *MockStore) CloseBuyRequestBySellRequest(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBuyRequestBySellRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseBuyRequestBySellRequest indicates an expected call of CloseBuyRequestBySellRequest.
func (mr *MockStoreMockRecorder) CloseBuyRequestBySellRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBuyRequestBySellRequest", reflect.TypeOf((*MockStore)(nil).CloseBuyRequestBySellRequest), arg0, arg1)
}

// CloseBuyRequestTx mocks base method.
func (m *MockStore) CloseBuyRequestTx(arg0 context.Context, arg1 db.CloseBuyRequestTxParams) (db.CloseBuyRequestTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBuyRequestTx", arg0, arg1)
	ret0, _ := ret[0].(db.CloseBuyRequestTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseBuyRequestTx indicates an expected call of CloseBuyRequestTx.
func (mr *MockStoreMockRecorder) CloseBuyRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBuyRequestTx", reflect.TypeOf((*MockStore)(nil).CloseBuyRequestTx), arg0, arg1)
}

// CloseConfirmByBuyer mocks base method.
func (m *MockStore) CloseConfirmByBuyer(arg0 context.Context, arg1 db.CloseConfirmByBuyerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConfirmByBuyer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConfirmByBuyer indicates an expected call of CloseConfirmByBuyer.
func (mr *MockStoreMockRecorder) CloseConfirmByBuyer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConfirmByBuyer", reflect.TypeOf((*MockStore)(nil).CloseConfirmByBuyer), arg0, arg1)
}

// CloseConfirmBySeller mocks base method.
func (m *MockStore) CloseConfirmBySeller(arg0 context.Context, arg1 db.CloseConfirmBySellerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConfirmBySeller", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConfirmBySeller indicates an expected call of CloseConfirmBySeller.
func (mr *MockStoreMockRecorder) CloseConfirmBySeller(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConfirmBySeller", reflect.TypeOf((*MockStore)(nil).CloseConfirmBySeller), arg0, arg1)
}

// CreateBuyRequest mocks base method.
func (m *MockStore) CreateBuyRequest(arg0 context.Context, arg1 db.CreateBuyRequestParams) (db.BuyRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuyRequest", arg0, arg1)
	ret0, _ := ret[0].(db.BuyRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuyRequest indicates an expected call of CreateBuyRequest.
func (mr *MockStoreMockRecorder) CreateBuyRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuyRequest", reflect.TypeOf((*MockStore)(nil).CreateBuyRequest), arg0, arg1)
}

// CreateBuyRequestTx mocks base method.
func (m *MockStore) CreateBuyRequestTx(arg0 context.Context, arg1 db.CreateBuyRequestTxParams) (db.CreateBuyRequestTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuyRequestTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateBuyRequestTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuyRequestTx indicates an expected call of CreateBuyRequestTx.
func (mr *MockStoreMockRecorder) CreateBuyRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuyRequestTx", reflect.TypeOf((*MockStore)(nil).CreateBuyRequestTx), arg0, arg1)
}

// CreateLockedAmount mocks base method.
func (m *MockStore) CreateLockedAmount(arg0 context.Context, arg1 db.CreateLockedAmountParams) (db.LockedAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLockedAmount", arg0, arg1)
	ret0, _ := ret[0].(db.LockedAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLockedAmount indicates an expected call of CreateLockedAmount.
func (mr *MockStoreMockRecorder) CreateLockedAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLockedAmount", reflect.TypeOf((*MockStore)(nil).CreateLockedAmount), arg0, arg1)
}

// CreateSellRequest mocks base method.
func (m *MockStore) CreateSellRequest(arg0 context.Context, arg1 db.CreateSellRequestParams) (db.SellRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSellRequest", arg0, arg1)
	ret0, _ := ret[0].(db.SellRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSellRequest indicates an expected call of CreateSellRequest.
func (mr *MockStoreMockRecorder) CreateSellRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSellRequest", reflect.TypeOf((*MockStore)(nil).CreateSellRequest), arg0, arg1)
}

// DeleteBuyRequest mocks base method.
func (m *MockStore) DeleteBuyRequest(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuyRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuyRequest indicates an expected call of DeleteBuyRequest.
func (mr *MockStoreMockRecorder) DeleteBuyRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuyRequest", reflect.TypeOf((*MockStore)(nil).DeleteBuyRequest), arg0, arg1)
}

// DeleteBuyRequestTx mocks base method.
func (m *MockStore) DeleteBuyRequestTx(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuyRequestTx", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBuyRequestTx indicates an expected call of DeleteBuyRequestTx.
func (mr *MockStoreMockRecorder) DeleteBuyRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuyRequestTx", reflect.TypeOf((*MockStore)(nil).DeleteBuyRequestTx), arg0, arg1)
}

// DeleteSellRequest mocks base method.
func (m *MockStore) DeleteSellRequest(arg0 context.Context, arg1 int32) (pgtype.Bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSellRequest", arg0, arg1)
	ret0, _ := ret[0].(pgtype.Bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSellRequest indicates an expected call of DeleteSellRequest.
func (mr *MockStoreMockRecorder) DeleteSellRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSellRequest", reflect.TypeOf((*MockStore)(nil).DeleteSellRequest), arg0, arg1)
}

// DeleteSellRequestTx mocks base method.
func (m *MockStore) DeleteSellRequestTx(arg0 context.Context, arg1 int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSellRequestTx", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSellRequestTx indicates an expected call of DeleteSellRequestTx.
func (mr *MockStoreMockRecorder) DeleteSellRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSellRequestTx", reflect.TypeOf((*MockStore)(nil).DeleteSellRequestTx), arg0, arg1)
}

// GetBuyRequestById mocks base method.
func (m *MockStore) GetBuyRequestById(arg0 context.Context, arg1 uuid.UUID) (db.BuyRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuyRequestById", arg0, arg1)
	ret0, _ := ret[0].(db.BuyRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuyRequestById indicates an expected call of GetBuyRequestById.
func (mr *MockStoreMockRecorder) GetBuyRequestById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuyRequestById", reflect.TypeOf((*MockStore)(nil).GetBuyRequestById), arg0, arg1)
}

// GetLockedAmount mocks base method.
func (m *MockStore) GetLockedAmount(arg0 context.Context, arg1 uuid.UUID) (db.LockedAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockedAmount", arg0, arg1)
	ret0, _ := ret[0].(db.LockedAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockedAmount indicates an expected call of GetLockedAmount.
func (mr *MockStoreMockRecorder) GetLockedAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedAmount", reflect.TypeOf((*MockStore)(nil).GetLockedAmount), arg0, arg1)
}

// GetLockedAmountBySellRequest mocks base method.
func (m *MockStore) GetLockedAmountBySellRequest(arg0 context.Context, arg1 int32) ([]db.LockedAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockedAmountBySellRequest", arg0, arg1)
	ret0, _ := ret[0].([]db.LockedAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockedAmountBySellRequest indicates an expected call of GetLockedAmountBySellRequest.
func (mr *MockStoreMockRecorder) GetLockedAmountBySellRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedAmountBySellRequest", reflect.TypeOf((*MockStore)(nil).GetLockedAmountBySellRequest), arg0, arg1)
}

// GetSellRequestById mocks base method.
func (m *MockStore) GetSellRequestById(arg0 context.Context, arg1 int32) (db.SellRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellRequestById", arg0, arg1)
	ret0, _ := ret[0].(db.SellRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellRequestById indicates an expected call of GetSellRequestById.
func (mr *MockStoreMockRecorder) GetSellRequestById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellRequestById", reflect.TypeOf((*MockStore)(nil).GetSellRequestById), arg0, arg1)
}

// GetSellRequestForUpdate mocks base method.
func (m *MockStore) GetSellRequestForUpdate(arg0 context.Context, arg1 int32) (db.SellRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellRequestForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.SellRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellRequestForUpdate indicates an expected call of GetSellRequestForUpdate.
func (mr *MockStoreMockRecorder) GetSellRequestForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellRequestForUpdate", reflect.TypeOf((*MockStore)(nil).GetSellRequestForUpdate), arg0, arg1)
}

// GetSellRequestTx mocks base method.
func (m *MockStore) GetSellRequestTx(arg0 context.Context, arg1 int32) (db.GetSellRequestTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellRequestTx", arg0, arg1)
	ret0, _ := ret[0].(db.GetSellRequestTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellRequestTx indicates an expected call of GetSellRequestTx.
func (mr *MockStoreMockRecorder) GetSellRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellRequestTx", reflect.TypeOf((*MockStore)(nil).GetSellRequestTx), arg0, arg1)
}

// ListBuyRequests mocks base method.
func (m *MockStore) ListBuyRequests(arg0 context.Context, arg1 db.ListBuyRequestsParams) ([]db.BuyRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuyRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.BuyRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuyRequests indicates an expected call of ListBuyRequests.
func (mr *MockStoreMockRecorder) ListBuyRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuyRequests", reflect.TypeOf((*MockStore)(nil).ListBuyRequests), arg0, arg1)
}

// ListLockedAmounts mocks base method.
func (m *MockStore) ListLockedAmounts(arg0 context.Context, arg1 db.ListLockedAmountsParams) ([]db.LockedAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLockedAmounts", arg0, arg1)
	ret0, _ := ret[0].([]db.LockedAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLockedAmounts indicates an expected call of ListLockedAmounts.
func (mr *MockStoreMockRecorder) ListLockedAmounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLockedAmounts", reflect.TypeOf((*MockStore)(nil).ListLockedAmounts), arg0, arg1)
}

// ListSellRequests mocks base method.
func (m *MockStore) ListSellRequests(arg0 context.Context, arg1 db.ListSellRequestsParams) ([]db.SellRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSellRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.SellRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSellRequests indicates an expected call of ListSellRequests.
func (mr *MockStoreMockRecorder) ListSellRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSellRequests", reflect.TypeOf((*MockStore)(nil).ListSellRequests), arg0, arg1)
}

// ListSellRequeststTx mocks base method.
func (m *MockStore) ListSellRequeststTx(arg0 context.Context, arg1 db.ListSellRequeststTxParams) (db.ListSellRequeststTxResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSellRequeststTx", arg0, arg1)
	ret0, _ := ret[0].(db.ListSellRequeststTxResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSellRequeststTx indicates an expected call of ListSellRequeststTx.
func (mr *MockStoreMockRecorder) ListSellRequeststTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSellRequeststTx", reflect.TypeOf((*MockStore)(nil).ListSellRequeststTx), arg0, arg1)
}

// OpenCloseBuyRequest mocks base method.
func (m *MockStore) OpenCloseBuyRequest(arg0 context.Context, arg1 db.OpenCloseBuyRequestParams) (db.BuyRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenCloseBuyRequest", arg0, arg1)
	ret0, _ := ret[0].(db.BuyRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenCloseBuyRequest indicates an expected call of OpenCloseBuyRequest.
func (mr *MockStoreMockRecorder) OpenCloseBuyRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenCloseBuyRequest", reflect.TypeOf((*MockStore)(nil).OpenCloseBuyRequest), arg0, arg1)
}

// OpenCloseSellRequest mocks base method.
func (m *MockStore) OpenCloseSellRequest(arg0 context.Context, arg1 db.OpenCloseSellRequestParams) (db.SellRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenCloseSellRequest", arg0, arg1)
	ret0, _ := ret[0].(db.SellRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenCloseSellRequest indicates an expected call of OpenCloseSellRequest.
func (mr *MockStoreMockRecorder) OpenCloseSellRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenCloseSellRequest", reflect.TypeOf((*MockStore)(nil).OpenCloseSellRequest), arg0, arg1)
}

// ReleaseLockedAmountByBuyRequest mocks base method.
func (m *MockStore) ReleaseLockedAmountByBuyRequest(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLockedAmountByBuyRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLockedAmountByBuyRequest indicates an expected call of ReleaseLockedAmountByBuyRequest.
func (mr *MockStoreMockRecorder) ReleaseLockedAmountByBuyRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockedAmountByBuyRequest", reflect.TypeOf((*MockStore)(nil).ReleaseLockedAmountByBuyRequest), arg0, arg1)
}

// ReleaseLockedAmountsBySellRequest mocks base method.
func (m *MockStore) ReleaseLockedAmountsBySellRequest(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLockedAmountsBySellRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLockedAmountsBySellRequest indicates an expected call of ReleaseLockedAmountsBySellRequest.
func (mr *MockStoreMockRecorder) ReleaseLockedAmountsBySellRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockedAmountsBySellRequest", reflect.TypeOf((*MockStore)(nil).ReleaseLockedAmountsBySellRequest), arg0, arg1)
}

// UpdateBuyRequest mocks base method.
func (m *MockStore) UpdateBuyRequest(arg0 context.Context, arg1 db.UpdateBuyRequestParams) (db.BuyRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuyRequest", arg0, arg1)
	ret0, _ := ret[0].(db.BuyRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuyRequest indicates an expected call of UpdateBuyRequest.
func (mr *MockStoreMockRecorder) UpdateBuyRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuyRequest", reflect.TypeOf((*MockStore)(nil).UpdateBuyRequest), arg0, arg1)
}

// UpdateSellRequest mocks base method.
func (m *MockStore) UpdateSellRequest(arg0 context.Context, arg1 db.UpdateSellRequestParams) (db.SellRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSellRequest", arg0, arg1)
	ret0, _ := ret[0].(db.SellRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSellRequest indicates an expected call of UpdateSellRequest.
func (mr *MockStoreMockRecorder) UpdateSellRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSellRequest", reflect.TypeOf((*MockStore)(nil).UpdateSellRequest), arg0, arg1)
}
