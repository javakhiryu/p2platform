// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: telegram_auth_code.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const confirmTelegramAuthCode = `-- name: ConfirmTelegramAuthCode :exec
UPDATE telegram_auth_codes
SET
    telegram_id = $2,
    status = $3
WHERE
    auth_code = $1
RETURNING auth_code, telegram_id, status, created_at, expires_at
`

type ConfirmTelegramAuthCodeParams struct {
	AuthCode   string      `json:"auth_code"`
	TelegramID pgtype.Int8 `json:"telegram_id"`
	Status     string      `json:"status"`
}

func (q *Queries) ConfirmTelegramAuthCode(ctx context.Context, arg ConfirmTelegramAuthCodeParams) error {
	_, err := q.db.Exec(ctx, confirmTelegramAuthCode, arg.AuthCode, arg.TelegramID, arg.Status)
	return err
}

const createTelegramAuthCode = `-- name: CreateTelegramAuthCode :one
INSERT INTO telegram_auth_codes (
    auth_code,
    expires_at
) VALUES (
    $1, $2
) 
RETURNING auth_code, telegram_id, status, created_at, expires_at
`

type CreateTelegramAuthCodeParams struct {
	AuthCode  string    `json:"auth_code"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateTelegramAuthCode(ctx context.Context, arg CreateTelegramAuthCodeParams) (TelegramAuthCode, error) {
	row := q.db.QueryRow(ctx, createTelegramAuthCode, arg.AuthCode, arg.ExpiresAt)
	var i TelegramAuthCode
	err := row.Scan(
		&i.AuthCode,
		&i.TelegramID,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const expireTelegramAuthCode = `-- name: ExpireTelegramAuthCode :exec
UPDATE telegram_auth_codes
SET
    status = 'expired'
WHERE
    auth_code = $1
`

func (q *Queries) ExpireTelegramAuthCode(ctx context.Context, authCode string) error {
	_, err := q.db.Exec(ctx, expireTelegramAuthCode, authCode)
	return err
}

const getTelegramAuthCode = `-- name: GetTelegramAuthCode :one
SELECT auth_code, telegram_id, status, created_at, expires_at FROM telegram_auth_codes WHERE auth_code = $1
`

func (q *Queries) GetTelegramAuthCode(ctx context.Context, authCode string) (TelegramAuthCode, error) {
	row := q.db.QueryRow(ctx, getTelegramAuthCode, authCode)
	var i TelegramAuthCode
	err := row.Scan(
		&i.AuthCode,
		&i.TelegramID,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listExpireAuthCodes = `-- name: ListExpireAuthCodes :many
SELECT auth_code, telegram_id, status, created_at, expires_at FROM telegram_auth_codes
WHERE expires_at < now()
  AND status = 'pending'
`

func (q *Queries) ListExpireAuthCodes(ctx context.Context) ([]TelegramAuthCode, error) {
	rows, err := q.db.Query(ctx, listExpireAuthCodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TelegramAuthCode{}
	for rows.Next() {
		var i TelegramAuthCode
		if err := rows.Scan(
			&i.AuthCode,
			&i.TelegramID,
			&i.Status,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
