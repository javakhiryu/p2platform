name: Deploy to production

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create app.env file
        run: |
          cat <<EOF > app.env
          ENVIRONMENT=${{ secrets.ENVIRONMENT }}
          DB_SOURCE=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
          HTTP_SERVER_ADDRESS=0.0.0.0:8080
          KAFKA_BROKERS=kafka:9092
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          BASE_URL=${{ secrets.BASE_URL }}
          ACCESS_TOKEN_DURATION=${{ secrets.ACCESS_TOKEN_DURATION }}
          EOF

      - name: Install swag
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          go get -u github.com/swaggo/gin-swagger
          go get -u github.com/swaggo/files
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Login to Personal ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://crpi-qzh5i8b0hkdo3v4d.ap-southeast-1.personal.cr.aliyuncs.com
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push API image
        run: |
          docker build -t crpi-qzh5i8b0hkdo3v4d.ap-southeast-1.personal.cr.aliyuncs.com/p2platform/api:${{ github.sha }} .
          docker push crpi-qzh5i8b0hkdo3v4d.ap-southeast-1.personal.cr.aliyuncs.com/p2platform/api:${{ github.sha }}

      - name: Copy compose file to ECS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ECS_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "/root/"
      
      - name: Copy nginx config to ECS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ECS_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "nginx/"
          target: "/root/"

      - name: Prepare ECS environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ECS_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex
            
            # Install Docker if not exists
            if ! command -v docker &>/dev/null; then
              apt-get update -qq
              apt-get install -y -qq \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg2 \
                software-properties-common

              curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
              add-apt-repository \
                "deb [arch=amd64] https://download.docker.com/linux/debian \
                buster \
                stable"

              apt-get update -qq
              apt-get install -y -qq docker-ce docker-ce-cli containerd.io
              systemctl enable docker
              systemctl start docker
            fi

            # Install Docker Compose if not exists
            if ! command -v docker-compose &>/dev/null; then
              curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            # Login to ACR
            echo "${{ secrets.REGISTRY_PASSWORD }}" | \
              docker login \
                --username "${{ secrets.REGISTRY_USERNAME }}" \
                --password-stdin \
                crpi-qzh5i8b0hkdo3v4d.ap-southeast-1.personal.cr.aliyuncs.com
            
            # Create .env file
            cat > .env <<EOF
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            EXT_PORT=${{ secrets.EXT_PORT }}
            IMAGE_TAG=${{ github.sha }}
            EOF

            # Prepare SSL configs
            mkdir -p /root/ssl-config
            curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf > /root/ssl-config/options-ssl-nginx.conf
            openssl dhparam -out /root/ssl-config/ssl-dhparams.pem 2048

      - name: Initial Nginx deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ECS_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex
            # Start only Nginx first
            docker-compose -f docker-compose.prod.yml up -d nginx

      - name: Obtain SSL certificates
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ECS_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex
              if [ ! -f "/usr/local/bin/wait-for-it.sh" ]; then
              curl -o /usr/local/bin/wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
              chmod +x /usr/local/bin/wait-for-it.sh
            fi
            
            # Ждем пока Nginx станет доступен на порту 80
            /usr/local/bin/wait-for-it.sh localhost:80 -t 30
            
            # Get certificates if they don't exist
            if [ ! -d "/var/lib/docker/volumes/certbot-etc/_data/live/${{secrets.DOMAIN_NAME}}" ]; then
              docker-compose -f docker-compose.prod.yml run --rm certbot certonly \
                --webroot \
                --webroot-path /var/www/certbot \
                --email ${{secrets.ADMIN_EMAIL}} \
                --agree-tos \
                --no-eff-email \
                -d ${{secrets.DOMAIN_NAME}}
            fi

      - name: Full deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ECS_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -ex
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Stop and start all services
            docker-compose -f docker-compose.prod.yml down || true
            docker-compose -f docker-compose.prod.yml up -d
            
            # Verify deployment
            docker ps -a
            echo "HTTPS API available at ${{ secrets.BASE_URL}}"
            echo "PostgreSQL available at ${{ secrets.ECS_IP }}:5432"
            echo "Kafka available at ${{ secrets.ECS_IP }}:9092"

      - name: Setup Certbot renewal
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ECS_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Add cron job for certbot renewal
            (crontab -l 2>/dev/null; echo "0 3 * * * docker exec certbot certbot renew --quiet --no-self-upgrade >> /var/log/certbot-renew.log 2>&1") | crontab -
            
            # Verify cron job was added
            crontab -