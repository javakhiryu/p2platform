# docker-compose.prod.yml
version: '3.8'

networks:
  p2platform:
    driver: bridge

volumes:
  db-data:
  kafka-data:
  certbot-etc:
  certbot-www:

services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - p2platform

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    networks:
      - p2platform
    environment:
      - KAFKA_HEAP_OPTS=-Xmx512m -Xms256m
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka

  api:
    image: crpi-qzh5i8b0hkdo3v4d.ap-southeast-1.personal.cr.aliyuncs.com/p2platform/api:${IMAGE_TAG}
    container_name: api
    expose:
      - "8080"
    environment:
      - DB_SOURCE=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - kafka
    entrypoint: ["/app/wait-for.sh", "postgres:5432", "--", "/app/wait-for.sh", "kafka:9092", "--", "/app/start.sh"]
    command: ["/app/main"]
    networks:
      - p2platform
  
  nginx:
      image: nginx:alpine
      container_name: nginx
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - ./nginx/conf.d:/etc/nginx/conf.d
        - certbot-etc:/etc/letsencrypt
        - certbot-www:/var/www/certbot
      depends_on:
        - api
      networks:
        - p2platform
  
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - p2platform